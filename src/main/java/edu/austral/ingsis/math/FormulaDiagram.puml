@startuml

class MathEngine {
  - functions: List<Function>
  + addFunction(function: Function): void
  + getFunctionByName(name: String): Function
  + evaluateFunction(name: String, variables: Map<String, Double>): Double
  + listVariables(name: String): Set<String>
}

interface Function {

  + evaluate(variables: Map<String, Double>): Double
  + getVariables(): Set<Variable>
  + toString(): String
}


class BinaryOperation extends Operator {
  - left: Expression
  - right: Expression
  - operator: String
  + evaluate(variables: Map<String, Double>): Double
  + getVariables(): Set<String>
}

class UnaryOperation extends Operator {
  - operand: Expression
  - operator: String
  + evaluate(variables: Map<String, Double>): Double
  + getVariables(): Set<String>
}

class Variable extends Operator {
  - name: String
  + evaluate(variables: Map<String, Double>): Double
  + getVariables(): Set<String>
}

class Constant extends Operator {
  - value: Double
  + evaluate(variables: Map<String, Double>): Double
  + getVariables(): Set<String>
}

MathEngine --> Function
Function --> Operator


@enduml
